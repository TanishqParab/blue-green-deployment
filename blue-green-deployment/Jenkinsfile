pipeline {
    agent any

    environment {
        AWS_REGION = "us-east-1"
        AWS_CREDENTIALS_ID = "aws-credentials"
        TF_WORKING_DIR = "./terraform"
        APP_FILE = "app.py"
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Initialize Terraform') {
            steps {
                script {
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Plan Infrastructure') {
            steps {
                script {
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform plan -out=tfplan'
                    }
                }
            }
        }

        stage('Apply Infrastructure') {
            steps {
                script {
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Deploy Python App') {
            steps {
                script {
                    def blue_instance = sh(script: "terraform output -raw blue_instance_public_ip", returnStdout: true).trim()
                    def green_instance = sh(script: "terraform output -raw green_instance_public_ip", returnStdout: true).trim()

                    sh """
                    scp -o StrictHostKeyChecking=no -i ~/.ssh/blue-green-key.pem ${APP_FILE} ec2-user@${blue_instance}:/home/ec2-user/app.py
                    ssh -o StrictHostKeyChecking=no -i ~/.ssh/blue-green-key.pem ec2-user@${blue_instance} 'nohup python3 /home/ec2-user/app.py > app.log 2>&1 &'
                    """

                    sh """
                    scp -o StrictHostKeyChecking=no -i ~/.ssh/blue-green-key.pem ${APP_FILE} ec2-user@${green_instance}:/home/ec2-user/app.py
                    ssh -o StrictHostKeyChecking=no -i ~/.ssh/blue-green-key.pem ec2-user@${green_instance} 'nohup python3 /home/ec2-user/app.py > app.log 2>&1 &'
                    """

                    echo "Deployment Completed!"
                }
            }
        }

        stage('Switch Traffic') {
            steps {
                script {
                    def active_instance = sh(script: "terraform output -raw active_instance", returnStdout: true).trim()
                    def standby_instance = sh(script: "terraform output -raw standby_instance", returnStdout: true).trim()

                    sh "aws elbv2 register-targets --target-group-arn \$TARGET_GROUP_ARN --targets Id=${standby_instance} --region ${AWS_REGION}"

                    sh "sleep 30"

                    sh "aws elbv2 deregister-targets --target-group-arn \$TARGET_GROUP_ARN --targets Id=${active_instance} --region ${AWS_REGION}"
                }
            }
        }

        stage('Wait before Destroy') {
            steps {
                script {
                    echo "Waiting for 15 minutes before destroying infrastructure..."
                    sh "sleep 900"  // 900 seconds = 15 minutes
                }
            }
        }

        stage('Destroy Infrastructure') {
            steps {
                script {
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Destroy Completed!"
        }
    }
}
