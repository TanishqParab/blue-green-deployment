pipeline {
    agent any

    environment {
        AWS_REGION = "us-east-1"
        AWS_CREDENTIALS_ID = "aws-credentials"
        TF_WORKING_DIR = "/var/lib/jenkins/workspace/blue-green-deployment-job/blue-green-deployment"
        APP_FILE = "app.py"
        SSH_KEY_ID = "blue-green-key"
        PRIVATE_KEY = credentials('blue-green-key')
    }

    stages {
        stage('Initialize Terraform') {
            steps {
                script {
                    echo "Initializing Terraform in ${TF_WORKING_DIR}"
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Plan Infrastructure') {
            steps {
                script {
                    echo "Running Terraform plan"
                    dir("${TF_WORKING_DIR}") {
                        withCredentials([sshUserPrivateKey(credentialsId: 'blue-green-key', keyFileVariable: 'SSH_KEY')]) {
                            sh """
                            export TF_VAR_private_key_path=$SSH_KEY
                            terraform plan -out=tfplan
                            """
                        }
                    }
                }
            }
        }

        stage('Apply Infrastructure & Deploy App') {
            steps {
                script {
                    echo "Applying Terraform plan and deploying app"
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform apply -auto-approve'
                    }

                    echo "Waiting for instances to start..."
                    sleep(60)

                    echo "Checking instance states..."
                    sh """
                    aws ec2 describe-instances \
                    --filters "Name=tag:Environment,Values=Blue-Green" \
                    --query 'Reservations[*].Instances[*].[InstanceId, State.Name]' \
                    --output table
                    """
                }
            }
        }

        stage('Retrieve Target Group ARNs') {
            steps {
                script {
                    echo "Fetching Target Group ARNs..."

                    def blue_tg_arn = sh(
                        script: """aws elbv2 describe-target-groups \
                        --names "blue-tg" \
                        --query 'TargetGroups[0].TargetGroupArn' --output text""",
                        returnStdout: true
                    ).trim()

                    def green_tg_arn = sh(
                        script: """aws elbv2 describe-target-groups \
                        --names "green-tg" \
                        --query 'TargetGroups[0].TargetGroupArn' --output text""",
                        returnStdout: true
                    ).trim()

                    if (!blue_tg_arn || !green_tg_arn) {
                        error "Failed to retrieve Target Group ARNs. Check AWS target groups."
                    }

                    echo "Blue Target Group ARN: ${blue_tg_arn}"
                    echo "Green Target Group ARN: ${green_tg_arn}"

                    env.BLUE_TG_ARN = blue_tg_arn
                    env.GREEN_TG_ARN = green_tg_arn
                }
            }
        }

        stage('Switch Traffic to Green') {
            steps {
                script {
                    def active_instance = sh(
                        script: "aws ec2 describe-instances --filters \"Name=tag:Name,Values=Blue-Instance\" \"Name=tag:Environment,Values=Blue-Green\" --query \"Reservations[*].Instances[*].InstanceId\" --output text",
                        returnStdout: true
                    ).trim()

                    def standby_instances = sh(
                        script: "aws ec2 describe-instances --filters \"Name=tag:Name,Values=Green-Instance\" \"Name=tag:Environment,Values=Blue-Green\" --query \"Reservations[*].Instances[*].InstanceId\" --output text",
                        returnStdout: true
                    ).trim()

                    if (!standby_instances) {
                        error "No Green instances found! Check AWS console."
                    }

                    standby_instances = standby_instances.replaceAll("\\s+", " ")

                    echo "Checking if Green instances are in 'running' state..."
                    sh "aws ec2 wait instance-running --instance-ids ${standby_instances}"

                    echo "Registering Green instances (${standby_instances}) to Green Target Group..."
                    sh "aws elbv2 register-targets --target-group-arn \"${env.GREEN_TG_ARN}\" --targets $(echo ${standby_instances} | awk '{for(i=1;i<=NF;i++) print \"Id=\" $i}') --region \"${env.AWS_REGION}\""
                    sh "sleep 30"

                    echo "Deregistering Blue instance (${active_instance}) from Blue Target Group..."
                    sh "aws elbv2 deregister-targets --target-group-arn \"${env.BLUE_TG_ARN}\" --targets Id=\"${active_instance}\" --region \"${env.AWS_REGION}\""
                }
            }
        }

        stage('Wait Before Destroy') {
            steps {
                script {
                    echo "Waiting for 15 minutes before destroying infrastructure..."
                    sh "sleep 900"
                }
            }
        }

        stage('Destroy Infrastructure') {
            steps {
                script {
                    echo "Destroying Infrastructure..."
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Destroy Completed!"
        }
    }
}
