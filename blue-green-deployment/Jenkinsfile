pipeline {
    agent any

    environment {
        AWS_REGION = "us-east-1"
        AWS_CREDENTIALS_ID = "aws-credentials"
        TF_WORKING_DIR = "/var/lib/jenkins/workspace/blue-green-deployment-job/blue-green-deployment"
        APP_FILE = "app.py"
        SSH_KEY_ID = "blue-green-key"
        PRIVATE_KEY = credentials('blue-green-key')  // Fetch SSH private key from Jenkins credentials
    }

    stages {
        stage('Initialize Terraform') {
            steps {
                script {
                    echo "Initializing Terraform in ${TF_WORKING_DIR}"
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform init'
                    }
                }
            }
        }

        stage('Plan Infrastructure') {
            steps {
                script {
                    echo "Running Terraform plan"
                    dir("${TF_WORKING_DIR}") {
                        withCredentials([sshUserPrivateKey(credentialsId: 'blue-green-key', keyFileVariable: 'SSH_KEY')]) {
                            sh """
                            export TF_VAR_private_key_path=$SSH_KEY
                            terraform plan -out=tfplan
                            """
                        }
                    }
                }
            }
        }

        stage('Apply Infrastructure & Deploy App') {
            steps {
                script {
                    echo "Applying Terraform plan and deploying app"
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform apply -auto-approve'
                    }

                    sleep(30)  // Ensure instances are ready

                    echo "Retrieving instance IPs..."
                    def instances = sh(
                        script: """
                        aws ec2 describe-instances \
                        --filters "Name=tag:Environment,Values=Blue-Green" "Name=instance-state-name,Values=running" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text
                        """,
                        returnStdout: true
                    ).trim()

                    if (!instances) {
                        error "No running instances found! Check AWS console and tagging."
                    }

                    def instanceList = instances.split("\n")

                    instanceList.each { instance ->
                        echo "Deploying to instance: ${instance}"
                        sshagent([SSH_KEY_ID]) {
                            sh """
                            echo "Copying app.py and setup script to ${instance}..."
                            scp -o StrictHostKeyChecking=no ${TF_WORKING_DIR}/modules/ec2/scripts/app.py ec2-user@${instance}:/home/ec2-user/app.py
                            scp -o StrictHostKeyChecking=no ${TF_WORKING_DIR}/modules/ec2/scripts/setup_flask_service.py ec2-user@${instance}:/home/ec2-user/setup_flask_service.py

                            echo "Running setup script on ${instance}..."
                            ssh ec2-user@${instance} 'chmod +x /home/ec2-user/setup_flask_service.py && sudo python3 /home/ec2-user/setup_flask_service.py'
                            """
                        }
                    }
                }
            }
        }

        stage('Retrieve Target Group ARN') {
            steps {
                script {
                    def targetGroupArn = sh(
                        script: """
                        aws elbv2 describe-target-groups --names "blue-green-target-group" --query "TargetGroups[0].TargetGroupArn" --output text --region ${AWS_REGION}
                        """,
                        returnStdout: true
                    ).trim()

                    if (!targetGroupArn) {
                        error "Failed to retrieve Target Group ARN! Check AWS ELB configurations."
                    }

                    echo "Target Group ARN: ${targetGroupArn}"
                    env.TARGET_GROUP_ARN = targetGroupArn
                }
            }
        }

        stage('Switch Traffic to Green') {
            steps {
                script {
                    def active_instance = sh(
                        script: "aws ec2 describe-instances --filters \"Name=tag:Name,Values=Blue-Instance\" \"Name=tag:Environment,Values=Blue-Green\" --query \"Reservations[*].Instances[*].InstanceId\" --output text",
                        returnStdout: true
                    ).trim()

                    def standby_instance = sh(
                        script: "aws ec2 describe-instances --filters \"Name=tag:Name,Values=Green-Instance\" \"Name=tag:Environment,Values=Blue-Green\" --query \"Reservations[*].Instances[*].InstanceId\" --output text",
                        returnStdout: true
                    ).trim()

                    echo "Switching traffic to Green instance: ${standby_instance}"
                    sh "aws elbv2 register-targets --target-group-arn ${env.TARGET_GROUP_ARN} --targets Id=${standby_instance} --region ${AWS_REGION}"
                    sh "sleep 30"

                    echo "Deregistering Blue instance: ${active_instance}"
                    sh "aws elbv2 deregister-targets --target-group-arn ${env.TARGET_GROUP_ARN} --targets Id=${active_instance} --region ${AWS_REGION}"
                }
            }
        }

        stage('Wait Before Destroy') {
            steps {
                script {
                    echo "Waiting for 15 minutes before destroying infrastructure..."
                    sh "sleep 900"
                }
            }
        }

        stage('Destroy Infrastructure') {
            steps {
                script {
                    echo "Destroying Infrastructure..."
                    dir("${TF_WORKING_DIR}") {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Destroy Completed!"
        }
    }
}
